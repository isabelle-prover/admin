<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Dumps PIDE database.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>H 0 * * 7</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>pipeline {
   agent { node &apos;lrz-large&apos; }

   options { timeout(time: 30, unit: &apos;HOURS&apos;) }

   stages {
      stage(&apos;Prepare&apos;) {
          steps {
              cleanWs()
          }
      }
      stage(&apos;Checkout&apos;) {
         steps {
            script {
               def response = httpRequest &apos;https://ci.isabelle.systems/jenkins/job/isabelle-all/lastSuccessfulBuild/api/xml?tree=actions[*[_class,mercurialNodeName]]&amp;xpath=freeStyleBuild/action[@_class=%22hudson.plugins.mercurial.MercurialTagAction%22]/mercurialNodeName&amp;wrapper=revs&apos;

               if (response.status != 200) error(&quot;Could not determine Isabelle/AFP version of last successful build!&quot;)

               env.ISABELLE_VERSION = (response.content =~ /&lt;mercurialNodeName&gt;([a-z0-9]+)/)[0][1]
               env.AFP_VERSION = (response.content =~ /&lt;mercurialNodeName&gt;([a-z0-9]+)/)[1][1]
            }
            checkout([$class: &apos;MercurialSCM&apos;, credentialsId: &apos;&apos;, revision: &quot;${ISABELLE_VERSION}&quot;, revisionType: &apos;CHANGESET&apos;, source: &apos;https://isabelle.in.tum.de/repos/isabelle&apos;])
            checkout([$class: &apos;MercurialSCM&apos;, credentialsId: &apos;&apos;, revision: &quot;${AFP_VERSION}&quot;, revisionType: &apos;CHANGESET&apos;, source: &apos;https://foss.heptapod.net/isa-afp/afp-devel&apos;, subdir: &apos;afp&apos;])
         }
      }
      stage(&apos;Install&apos;) {
         steps {
            sh &apos;bin/isabelle components -a&apos;
            sh &apos;bin/isabelle jedit -bf&apos;
            sh &apos;bin/isabelle ocaml_setup&apos;
            sh &apos;bin/isabelle ghc_setup&apos;
         }
      }
      stage(&apos;Dump&apos;) {
         steps {
            sh &apos;bin/isabelle dump -o threads=4 -D afp/thys -b Pure -X slow -X large -X very_slow -O dump -a || true&apos;
         }
      }
      stage(&apos;Store&apos;) {
          steps {
            zip zipFile: &apos;dump.zip&apos;, archive: true, dir: &apos;dump/&apos;
          }
      }
   }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
